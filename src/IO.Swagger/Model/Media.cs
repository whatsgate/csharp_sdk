/* 
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Media
    /// </summary>
    [DataContract]
        public partial class Media :  IEquatable<Media>, IValidatableObject
    {
        /// <summary>
        /// Mime type of file
        /// </summary>
        /// <value>Mime type of file</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MimetypeEnum
        {
            /// <summary>
            /// Enum ApplicationOgg for value: application/ogg
            /// </summary>
            [EnumMember(Value = "application/ogg")]
            ApplicationOgg = 1,
            /// <summary>
            /// Enum ApplicationPdf for value: application/pdf
            /// </summary>
            [EnumMember(Value = "application/pdf")]
            ApplicationPdf = 2,
            /// <summary>
            /// Enum ApplicationZip for value: application/zip
            /// </summary>
            [EnumMember(Value = "application/zip")]
            ApplicationZip = 3,
            /// <summary>
            /// Enum ApplicationGzip for value: application/gzip
            /// </summary>
            [EnumMember(Value = "application/gzip")]
            ApplicationGzip = 4,
            /// <summary>
            /// Enum ApplicationMsword for value: application/msword
            /// </summary>
            [EnumMember(Value = "application/msword")]
            ApplicationMsword = 5,
            /// <summary>
            /// Enum AudioMp4 for value: audio/mp4
            /// </summary>
            [EnumMember(Value = "audio/mp4")]
            AudioMp4 = 6,
            /// <summary>
            /// Enum AudioAac for value: audio/aac
            /// </summary>
            [EnumMember(Value = "audio/aac")]
            AudioAac = 7,
            /// <summary>
            /// Enum AudioMpeg for value: audio/mpeg
            /// </summary>
            [EnumMember(Value = "audio/mpeg")]
            AudioMpeg = 8,
            /// <summary>
            /// Enum AudioOgg for value: audio/ogg
            /// </summary>
            [EnumMember(Value = "audio/ogg")]
            AudioOgg = 9,
            /// <summary>
            /// Enum AudioWebm for value: audio/webm
            /// </summary>
            [EnumMember(Value = "audio/webm")]
            AudioWebm = 10,
            /// <summary>
            /// Enum ImageGif for value: image/gif
            /// </summary>
            [EnumMember(Value = "image/gif")]
            ImageGif = 11,
            /// <summary>
            /// Enum ImageJpeg for value: image/jpeg
            /// </summary>
            [EnumMember(Value = "image/jpeg")]
            ImageJpeg = 12,
            /// <summary>
            /// Enum ImagePjpeg for value: image/pjpeg
            /// </summary>
            [EnumMember(Value = "image/pjpeg")]
            ImagePjpeg = 13,
            /// <summary>
            /// Enum ImagePng for value: image/png
            /// </summary>
            [EnumMember(Value = "image/png")]
            ImagePng = 14,
            /// <summary>
            /// Enum ImageSvgxml for value: image/svg+xml
            /// </summary>
            [EnumMember(Value = "image/svg+xml")]
            ImageSvgxml = 15,
            /// <summary>
            /// Enum ImageTiff for value: image/tiff
            /// </summary>
            [EnumMember(Value = "image/tiff")]
            ImageTiff = 16,
            /// <summary>
            /// Enum ImageWebp for value: image/webp
            /// </summary>
            [EnumMember(Value = "image/webp")]
            ImageWebp = 17,
            /// <summary>
            /// Enum VideoMpeg for value: video/mpeg
            /// </summary>
            [EnumMember(Value = "video/mpeg")]
            VideoMpeg = 18,
            /// <summary>
            /// Enum VideoMp4 for value: video/mp4
            /// </summary>
            [EnumMember(Value = "video/mp4")]
            VideoMp4 = 19,
            /// <summary>
            /// Enum VideoOgg for value: video/ogg
            /// </summary>
            [EnumMember(Value = "video/ogg")]
            VideoOgg = 20,
            /// <summary>
            /// Enum VideoQuicktime for value: video/quicktime
            /// </summary>
            [EnumMember(Value = "video/quicktime")]
            VideoQuicktime = 21,
            /// <summary>
            /// Enum VideoWebm for value: video/webm
            /// </summary>
            [EnumMember(Value = "video/webm")]
            VideoWebm = 22,
            /// <summary>
            /// Enum VideoXMsWmv for value: video/x-ms-wmv
            /// </summary>
            [EnumMember(Value = "video/x-ms-wmv")]
            VideoXMsWmv = 23,
            /// <summary>
            /// Enum VideoXFlv for value: video/x-flv
            /// </summary>
            [EnumMember(Value = "video/x-flv")]
            VideoXFlv = 24,
            /// <summary>
            /// Enum ApplicationVndMsExcel for value: application/vnd.ms-excel
            /// </summary>
            [EnumMember(Value = "application/vnd.ms-excel")]
            ApplicationVndMsExcel = 25,
            /// <summary>
            /// Enum ApplicationVndMsPowerpoint for value: application/vnd.ms-powerpoint
            /// </summary>
            [EnumMember(Value = "application/vnd.ms-powerpoint")]
            ApplicationVndMsPowerpoint = 26,
            /// <summary>
            /// Enum ApplicationMsword_26 for value: application/msword
            /// </summary>
            [EnumMember(Value = "application/msword")]
            ApplicationMsword_26 = 27        }
        /// <summary>
        /// Mime type of file
        /// </summary>
        /// <value>Mime type of file</value>
        [DataMember(Name="mimetype", EmitDefaultValue=false)]
        public MimetypeEnum Mimetype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="mimetype">Mime type of file (required).</param>
        /// <param name="data">Base64 encoded data file body (required).</param>
        /// <param name="filename">Name of the file (required).</param>
        public Media(MimetypeEnum mimetype = default(MimetypeEnum), string data = default(string), string filename = default(string))
        {
            // to ensure "mimetype" is required (not null)
            if (mimetype == null)
            {
                throw new InvalidDataException("mimetype is a required property for Media and cannot be null");
            }
            else
            {
                this.Mimetype = mimetype;
            }
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for Media and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for Media and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
        }
        

        /// <summary>
        /// Base64 encoded data file body
        /// </summary>
        /// <value>Base64 encoded data file body</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Name of the file
        /// </summary>
        /// <value>Name of the file</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  Mimetype: ").Append(Mimetype).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mimetype == input.Mimetype ||
                    (this.Mimetype != null &&
                    this.Mimetype.Equals(input.Mimetype))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mimetype != null)
                    hashCode = hashCode * 59 + this.Mimetype.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
