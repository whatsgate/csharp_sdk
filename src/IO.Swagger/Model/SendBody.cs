/* 
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SendBody
    /// </summary>
    [DataContract]
        public partial class SendBody :  IEquatable<SendBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBody" /> class.
        /// </summary>
        /// <param name="whatsappID">Service Whatsapp ID (required).</param>
        /// <param name="async">Async query returns Message Object.</param>
        /// <param name="recipient">recipient.</param>
        /// <param name="message">message.</param>
        public SendBody(string whatsappID = default(string), bool? async = default(bool?), AnyOfsendBodyRecipient recipient = default(AnyOfsendBodyRecipient), AnyOfsendBodyMessage message = default(AnyOfsendBodyMessage))
        {
            // to ensure "whatsappID" is required (not null)
            if (whatsappID == null)
            {
                throw new InvalidDataException("whatsappID is a required property for SendBody and cannot be null");
            }
            else
            {
                this.WhatsappID = whatsappID;
            }
            this.Async = async;
            this.Recipient = recipient;
            this.Message = message;
        }
        
        /// <summary>
        /// Service Whatsapp ID
        /// </summary>
        /// <value>Service Whatsapp ID</value>
        [DataMember(Name="WhatsappID", EmitDefaultValue=false)]
        public string WhatsappID { get; set; }

        /// <summary>
        /// Async query returns Message Object
        /// </summary>
        /// <value>Async query returns Message Object</value>
        [DataMember(Name="async", EmitDefaultValue=false)]
        public bool? Async { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public AnyOfsendBodyRecipient Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public AnyOfsendBodyMessage Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBody {\n");
            sb.Append("  WhatsappID: ").Append(WhatsappID).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBody);
        }

        /// <summary>
        /// Returns true if SendBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WhatsappID == input.WhatsappID ||
                    (this.WhatsappID != null &&
                    this.WhatsappID.Equals(input.WhatsappID))
                ) && 
                (
                    this.Async == input.Async ||
                    (this.Async != null &&
                    this.Async.Equals(input.Async))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhatsappID != null)
                    hashCode = hashCode * 59 + this.WhatsappID.GetHashCode();
                if (this.Async != null)
                    hashCode = hashCode * 59 + this.Async.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
