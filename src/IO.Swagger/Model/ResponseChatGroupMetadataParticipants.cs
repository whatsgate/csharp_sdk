/* 
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ResponseChatGroupMetadataParticipants
    /// </summary>
    [DataContract]
        public partial class ResponseChatGroupMetadataParticipants :  IEquatable<ResponseChatGroupMetadataParticipants>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseChatGroupMetadataParticipants" /> class.
        /// </summary>
        /// <param name="id">Идентификатор контакта в формате WhatsApp.</param>
        /// <param name="isAdmin">Является ли участник администратором.</param>
        /// <param name="isSuperAdmin">Является ли участник суперадминистратором.</param>
        public ResponseChatGroupMetadataParticipants(string id = default(string), bool? isAdmin = default(bool?), bool? isSuperAdmin = default(bool?))
        {
            this.Id = id;
            this.IsAdmin = isAdmin;
            this.IsSuperAdmin = isSuperAdmin;
        }
        
        /// <summary>
        /// Идентификатор контакта в формате WhatsApp
        /// </summary>
        /// <value>Идентификатор контакта в формате WhatsApp</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Является ли участник администратором
        /// </summary>
        /// <value>Является ли участник администратором</value>
        [DataMember(Name="isAdmin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// Является ли участник суперадминистратором
        /// </summary>
        /// <value>Является ли участник суперадминистратором</value>
        [DataMember(Name="isSuperAdmin", EmitDefaultValue=false)]
        public bool? IsSuperAdmin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseChatGroupMetadataParticipants {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsSuperAdmin: ").Append(IsSuperAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseChatGroupMetadataParticipants);
        }

        /// <summary>
        /// Returns true if ResponseChatGroupMetadataParticipants instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseChatGroupMetadataParticipants to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseChatGroupMetadataParticipants input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    (this.IsAdmin != null &&
                    this.IsAdmin.Equals(input.IsAdmin))
                ) && 
                (
                    this.IsSuperAdmin == input.IsSuperAdmin ||
                    (this.IsSuperAdmin != null &&
                    this.IsSuperAdmin.Equals(input.IsSuperAdmin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsAdmin != null)
                    hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                if (this.IsSuperAdmin != null)
                    hashCode = hashCode * 59 + this.IsSuperAdmin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
