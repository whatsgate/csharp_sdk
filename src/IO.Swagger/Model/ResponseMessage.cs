/* 
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ResponseMessage
    /// </summary>
    [DataContract]
        public partial class ResponseMessage :  IEquatable<ResponseMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseMessage" /> class.
        /// </summary>
        /// <param name="id">Идентификатор сообщения.</param>
        /// <param name="ack">Флаг просмотра сообщения.</param>
        /// <param name="hasMedia">Флаг, имеет ли сообщение медиафайл.</param>
        /// <param name="mediaKey">Ключ медиафайла (при наличии).</param>
        /// <param name="body">Текст сообщения.</param>
        /// <param name="type">Тип сообщения.</param>
        /// <param name="timestamp">Время сообщения в формате Unix Timestamp.</param>
        /// <param name="from">Идентификатор отправителя в формате WhatsApp.</param>
        /// <param name="to">Идентификатор получателя в формате WhatsApp.</param>
        /// <param name="isForwarded">Флаг, было ли сообщение перенаправлено.</param>
        public ResponseMessage(string id = default(string), int? ack = default(int?), bool? hasMedia = default(bool?), string mediaKey = default(string), string body = default(string), string type = default(string), int? timestamp = default(int?), string from = default(string), string to = default(string), bool? isForwarded = default(bool?))
        {
            this.Id = id;
            this.Ack = ack;
            this.HasMedia = hasMedia;
            this.MediaKey = mediaKey;
            this.Body = body;
            this.Type = type;
            this.Timestamp = timestamp;
            this.From = from;
            this.To = to;
            this.IsForwarded = isForwarded;
        }
        
        /// <summary>
        /// Идентификатор сообщения
        /// </summary>
        /// <value>Идентификатор сообщения</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Флаг просмотра сообщения
        /// </summary>
        /// <value>Флаг просмотра сообщения</value>
        [DataMember(Name="ack", EmitDefaultValue=false)]
        public int? Ack { get; set; }

        /// <summary>
        /// Флаг, имеет ли сообщение медиафайл
        /// </summary>
        /// <value>Флаг, имеет ли сообщение медиафайл</value>
        [DataMember(Name="hasMedia", EmitDefaultValue=false)]
        public bool? HasMedia { get; set; }

        /// <summary>
        /// Ключ медиафайла (при наличии)
        /// </summary>
        /// <value>Ключ медиафайла (при наличии)</value>
        [DataMember(Name="mediaKey", EmitDefaultValue=false)]
        public string MediaKey { get; set; }

        /// <summary>
        /// Текст сообщения
        /// </summary>
        /// <value>Текст сообщения</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Тип сообщения
        /// </summary>
        /// <value>Тип сообщения</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Время сообщения в формате Unix Timestamp
        /// </summary>
        /// <value>Время сообщения в формате Unix Timestamp</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// Идентификатор отправителя в формате WhatsApp
        /// </summary>
        /// <value>Идентификатор отправителя в формате WhatsApp</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Идентификатор получателя в формате WhatsApp
        /// </summary>
        /// <value>Идентификатор получателя в формате WhatsApp</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Флаг, было ли сообщение перенаправлено
        /// </summary>
        /// <value>Флаг, было ли сообщение перенаправлено</value>
        [DataMember(Name="isForwarded", EmitDefaultValue=false)]
        public bool? IsForwarded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ack: ").Append(Ack).Append("\n");
            sb.Append("  HasMedia: ").Append(HasMedia).Append("\n");
            sb.Append("  MediaKey: ").Append(MediaKey).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  IsForwarded: ").Append(IsForwarded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseMessage);
        }

        /// <summary>
        /// Returns true if ResponseMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Ack == input.Ack ||
                    (this.Ack != null &&
                    this.Ack.Equals(input.Ack))
                ) && 
                (
                    this.HasMedia == input.HasMedia ||
                    (this.HasMedia != null &&
                    this.HasMedia.Equals(input.HasMedia))
                ) && 
                (
                    this.MediaKey == input.MediaKey ||
                    (this.MediaKey != null &&
                    this.MediaKey.Equals(input.MediaKey))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.IsForwarded == input.IsForwarded ||
                    (this.IsForwarded != null &&
                    this.IsForwarded.Equals(input.IsForwarded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Ack != null)
                    hashCode = hashCode * 59 + this.Ack.GetHashCode();
                if (this.HasMedia != null)
                    hashCode = hashCode * 59 + this.HasMedia.GetHashCode();
                if (this.MediaKey != null)
                    hashCode = hashCode * 59 + this.MediaKey.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.IsForwarded != null)
                    hashCode = hashCode * 59 + this.IsForwarded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
